dim interval
dim exposure
dim connected # connection status variable
dim shots_taken
dim shots_requested
dim slide_zero_pwm
dim pwm_baseline
dim initializing
 
# Boot event listener
event system_boot(major ,minor ,patch ,build ,ll_version ,protocol_version ,hw)
	# Device is not connected yet
	connected = 0
	# We haven't taken any photos yet
	shots_taken = 0
	call attributes_write(c_shots_taken, 0, 2, shots_taken)
	# No shots requested
	shots_requested = 0
	call attributes_write(c_shots_requested, 0, 2, shots_requested)
	# Expsure set to 30 seconds
	exposure = 30
	call attributes_write(c_exposure_length, 0, 2, exposure)
	# Interval set to 45 seconds
	interval = 45
	call attributes_write(c_shot_interval, 0, 2, interval)
	# Set the 'zero' pwm greyscale to 50%
	pwm_baseline = 5120
	slide_zero_pwm = 5120/2
	initializing = 0
	# Set advertisement interval to 20ms min, 30 ms max (units are 0.625 ms)
	# Use all three advertisement channels (7 = bitmask 0b00000111)
	call gap_set_adv_parameters(32, 48, 7)
	# Start advertising (discoverable/connectable)
	call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)

    call hardware_io_port_config_direction(0, 18)
	# enable interrupt on P1_3 and P1_4 rising edge
    # (parameters are port=0, bitmask=0b000011000, edge=falling)
    call hardware_io_port_config_irq(1, 18, 1)
end
 


# Connection event listener
event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
	# Device is connected
	connected = 1
end

# Desconnection event listener
event connection_disconnected(connection, result)
	#connection disconnected, resume advertising
	call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
	connected = 0
end

# Procedure to incrememnt the GATT attribute of the number of shots taken.
procedure increment_shots_taken()
	shots_taken = shots_taken + 1
	call attributes_write(c_shots_taken, 0, 2, shots_taken)
end

dim result
dim portread
dim data
# Catch an attribute write event from the phone...
event attributes_value(connection, reason, handle, offset, value_len, value_data)
	# This is to handle all user attributes changes.
	if handle = u_init then
		if value_data(0:1) = 1 then
			initializing = 1
			# Configure timer for PWM servo source...
			# 32.768 MHz chip, Timer1 set to divisor = 3 in hardware.xml
			# which divides by 128, so we end up with 256 kHz
			# and we want to get to 50 Hz for servo
			# So we set the comparator to flip every 5120 ticks, for 50 Hz
			# pwm_baseline is a variable set to 5120
			# Channel 0 (IO pin 1.2) is set as baseline frequency at 50 Hz:
			call hardware_timer_comparator(1, 0, 6, pwm_baseline)
			# Channel 1 (IO pin 1.3) is now the PWM output...
			# set to 50% (slide_zero_pwm = pwm_baseline/2)
			call hardware_timer_comparator(1,1,6,slide_zero_pwm)
			# Channel 2 (IO pin 1.4) is now the PWM output...
			# set to 0% !!Uncomment when we have a new board!!
			# call hardware_timer_comparator(1,2,6,0)

			# Check to see if we are at the limit...
			call hardware_io_port_read(1, $18)(result, portread, data)
			if data = $8 then
				# We have not hit any limit switch yet... run as needed.
				# Now move the sliding axis until we reach the negative limit switch
				# Set duty cycle to 25% (pwm_baseline/4)
				# This will cause our continuous rotation servo to move negative indefinitely
				# (until we catch the limit switch input low transition)
				# We should add in capability to start from the other direction, too...
				call hardware_timer_comparator(1,1,6,(pwm_baseline/4))
				while initializing = 1
					# Twiddle our thumbs waiting for the limit switch to be hit...
				end while
				# The slide axis has reached the limit switch.
			else
				# Already at the limit! Don't do anything.
			end if
			# !!!!!!!! remember to add in capability for the other direction.
			
			# Reset the GATT initialize trigger. This has the indicate property.
			# This pushes the updated attribute to the client.
			call attributes_write(u_init, 0, 1, 0)
			#Finished initializing!
		end if
	end if
	if handle = u_trigger_sequence then
		# Start acquisition sequence here...
		if value_data(0:1) = 1 then
			# Update status from 0 to 1...
			call attributes_write(c_slider_status, 0, 1, 1)
			# Indicate that we have taken no shots yet.
			shots_taken = 0
			call attributes_write(c_shots_taken, 0, 2, shots_taken)
		end if
	end if
end

# catch limit switch event P1_3, P1_4 (active LOW configuration)
event hardware_io_port_status(delta, port, irq, state)
    if port = 1 then
        if (irq & $8) = 0 then
            # P1_3 is LOW and the source of this interrupt
            # Stop slider motion...
			call hardware_timer_comparator(1,1,6,slide_zero_pwm)
			initializing = 0
        end if
        if (irq & $10) = 0 then
            # P1_4 is LOW and the source of this interrupt
            # Stop slider motion...
			call hardware_timer_comparator(1,1,6,slide_zero_pwm)
			initializing = 0
        end if
    end if
end